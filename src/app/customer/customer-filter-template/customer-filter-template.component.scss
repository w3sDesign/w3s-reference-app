// analog customer-list.component.scss


.comma:not(:first-child)::before {
  content: ', ';
}


.nixclose:hover {
  background: #ff4081;
  color: #fff;
}


.row-container {
  @extend %flex-box;
  padding: 0 8px 16px 24px;
  width: 100%;

}

mat-drawer-container {
  padding: 0 8px 30px 24px;
  // min-height: 300px;
}

.drawer-open {
  min-height: 500px;
}

mat-drawer {
  width: 180px;
//   min-height: 300px;
}



// #filterButtons {
//   @extend %flex-box;
//   // padding: 0 0 16px 24px; //30px 8px 16px 0px;
//   // width: 100%;
// }

// #crudButtons {
//   @extend %flex-box;
//   padding: 16px 8px 16px 24px;
//   width: 100%;
// }



%flex-box {

  display: flex;

  flex-direction: row;
  align-items: center; // vertical
  justify-content: flex-start; // horizontal
  flex-wrap: wrap; // default = nowrap

  font-size: 14px;
  // padding: 16px 8px 16px 24px;

  .mat-form-field,
  button {
    margin-right: 20px;
  }
}

// .mat-form-field {
//   margin-right: 30px;
// }


table {
  width: 100%;
}

// .mat-spinner {
//   margin: 16px 10px;
// }

.mat-cell,
.mat-header-cell,
.mat-footer-cell {
  padding-right: 10px;
  font-size: 14px;
}

.mat-header-row,
.mat-footer-row {
  background-color: whitesmoke;
  /* #f7f7f7; */
  color: #346187;
  text-shadow: 0 0 0.125rem #ffffff;
}




.special-font {
  font-family: monospace;
}

/*
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Aligning_Items_in_a_Flex_Container
Instead we can target item 4 and separate it from the first three items
by giving it a margin-left value of auto.
Auto margins will take up all of the space that they can in their axis â€”
it is how centering a block with margin auto left and right works.
Each side tries to take as much space as it can,
and so the block is pushed into the middle. */

.push-right {
  margin-left: auto;
}



